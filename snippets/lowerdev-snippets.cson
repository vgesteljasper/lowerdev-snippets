'.source.js.jsx':

  # INIT FUNCTION
  # init
  'init function':
    'prefix': 'init'
    'body': """
    /**
     * @author ${1:name} <${2:example@email.com}>
     */

    const init = () => {
      ${3:console.log(`script initialised`);}
    };

    init();"""

  # GET ELEMENT BY ID
  # gbi
  'getElementById':
    'prefix': 'gbi'
    'body': """const ${1:elementName} = document.getElementById(`${2:node}`);"""

  # GET ELEMENTS BY CLASS NAME
  # gbc
  'getElementsByClassName':
    'prefix': 'gbc'
    'body': """const ${1:elementName} = document.getElementsByClassName(`${2:node}`);"""

  # QUERYSELECTOR
  # qs
  'querySelector':
    'prefix': 'qs'
    'body': """const ${1:elementName} = document.querySelector(`${2:node}`);"""

  # QUERYSELECTOR ALL
  # qsa
  'querySelectorAll':
    'prefix': 'qsa'
    'body': """const ${1:elementName} = document.querySelectorAll(`${2:node}`);"""

  # ES6 IMOORT
  # im
  'es6 import':
    'prefix': 'im'
    'body': """import ${1:something} from '${2:somewhere}';"""

  # REACT | COMPONENT WILL MOUNT
  # cwm
  'componentWillMount':
    'prefix': 'cwm'
    'body': """
    componentWillMount() {
      ${1:code}
    }"""

  # REACT | COMPONENT DID MOUNT
  # cdm
  'componentDidMount':
    'prefix': 'cdm'
    'body': """
    componentDidMount() {
      ${1:code}
    }"""

  # REACT | COMPONENT WILL RECEIVE PROPS
  # cwr
  'componentWillReceiveProps':
    'prefix': 'cwr'
    'body': """
    componentWillReceiveProps() {
      ${1:code}
    }"""

  # REACT | SHOULD COMPONENT UPDATE
  # ssu
  'shouldComponentUpdate':
    'prefix': 'scu'
    'body': """
    shouldComponentUpdate() {
      ${1:code}
    }"""

  # REACT | COMPONENT DID UPDATE
  # cdu
  'componentDidUpdate':
    'prefix': 'cdu'
    'body': """
    componentDidUpdate() {
      ${1:code}
    }"""

  # REACT | COMPONENT WILL UPDATE
  # cwup
  'componentWillUpdate':
    'prefix': 'cwup'
    'body': """
    componentWillUpdate() {
      ${1:code}
    }"""

  # REACT | COMPONENT WILL UNMOUNT
  # cwun
  'componentWillUnmount':
    'prefix': 'cwun'
    'body': """
    componentWillUnmount() {
      ${1:code}
    }"""

  # REACT | ELEMENT REFERENCE
  # ref
  'component reference':
    'prefix': 'ref'
    'body': """ref={el => this.${1:referenceName} = el}"""

  # REACT | SET STATE
  # ss
  'setState':
    'prefix': 'ss'
    'body': """
    this.setState({
      ${1:key: value}
    });"""

  # REACT | NEW CONTAINER COMPONENT (CLASS, STATEFUL)
  # cc
  'new container component (class)':
    'prefix': 'cc'
    'body': """
    import React, {Component} from 'react';

    class ${1:ComponentName} extends Component {

      state = {}

      render() {
        return (
          <span>${1:ComponentName}</span>
        );
      }
    }

    export default ${1:ComponentName};"""

  # REACT | NEW PRESENTATION COMPONENT (METHOD, STATELESS)
  # pc
  'new presentation component (method)':
    'prefix': 'pc'
    'body': """
    import React, {PropTypes} from 'react';

    const ${1:ComponentName} = ({someProperty}) => {

      return (
        <span>${1:ComponentName} - {someProperty}</span>
      );

    };

    ${1:ComponentName}.propTypes = {
      someProperty: PropTypes.string.isRequired
    };

    export default ${1:ComponentName};"""


  # REACT-ROUTER | IMPORT REACT ROUTER
  # ir
  'import react-router':
    'prefix': 'ir'
    'body': """import {${1:routerType} as ${2:newName}} from 'react-router';"""
